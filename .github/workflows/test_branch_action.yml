name: "Test branch actions"
on:
  push:
    branches:
      - Test
  pull_request:
    branches:
      - Test
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write

jobs:
  test:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    - name: Test with unittest module
      run: python -m unittest discover -v -s ./src
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Install tox
        run: pip install tox
      - name: Run tox
        run: tox -e py
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  lint:
    name: Flake8 with annotations
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - uses: TrueBrain/actions-flake8@v2
        with:
          only_warn: 1
          max_line_length: 80
          extra_arguments: "--max-complexity=10"
  deploy:
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'push'
    steps:
    - name: executing remote ssh commands
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
            cd ${{ secrets.PROJECT_FOLDER }};
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git checkout Test;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git pull;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.yml down;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.yml up -d --build;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker system prune --all --force;
  sphinx_docs_to_gh-pages:
    permissions:
      contents: write
      pages: write
    name: Sphinx docs to gh-pages
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install -r docs/requirements.txt
      - name: Running the Sphinx to gh-pages Action
        uses: uibcdf/action-sphinx-docs-to-gh-pages@v1.1.0
        with:
          branch: Test
          dir_docs: docs
          sphinxapiopts: '--separate -o . ../'
          sphinxapiexclude: '../*setup* ../*.ipynb  **/test_runner.py'
          sphinxopts: ''
